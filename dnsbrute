#!/bin/bash

red='\033[0;31m'
green='\033[0;32m'
yellow='\033[0;33m'
blue='\033[0;34m'
magenta='\033[0;35m'
cyan='\033[0;36m'
NC='\033[0m'


usage() { 
	echo "Usage: dnsbrute -d domain.tld 
	[-w wordlist.txt] -> Specify a wordlist
	[-l dnsgen-wordlist.txt] -> Specify a wordlist as DNSGen wordlist
	[-c subdomain.txt] -> If you have done subdomain enumeration, please enter your subdomains (if you enter subdomains, the script will not do subdomain enumeration)
	[-i] -> Adding non-resolved subdomains along with resolved subdomains as input to DNSGen
	[-r resolvers.txt] -> Specify a list of resolvers
	[-s] -> To run the script in silent mode
	[-o output.txt] -> To write output to a file instead of the terminal
	[-h] -> To show help message
	" 1>&2; 
	exit 1; 
}

while getopts "d:c:r:o:w:l:sih" flag
do
    case "${flag}" in
        d) domain=${OPTARG#*//};;
        c) subdomain="$OPTARG";;
        i) include_unresolved_subs=true;;
        r) resolvers="$OPTARG";;
        w) wordlist="$OPTARG";;
        l) dnsgen_wl="$OPTARG";;
        o) output="$OPTARG";;
        h) help=true;;
        s) silent=true;;
        \? ) usage;;
        : ) usage;;
	*) usage;;
    esac
done

if [[ -z "${silent}" ]]; then
	printf "
	      _           _                _         
	   __| |_ __  ___| |__  _ __ _   _| |_ ___   
	  / _\` | '_ \/ __| '_ \| '__| | | | __/ _ \  
	 | (_| | | | \__ \ |_) | |  | |_| | ||  __/  
	  \__,_|_| |_|___/_.__/|_|   \__,_|\__\___|  
		                                     
		      ${cyan}Developed by MHA${NC}             
		         ${yellow}mha4065.com${NC}                 

	"
fi

if $help; then
  usage
fi

if [[ -z "${domain}" || -z "${wordlist}" || -z "${resolvers}" ]]; then
  usage
fi

# Check dnsbrute_results/domain is exist or not
#=======================================================================
if [ ! -d "results" ]; then
    mkdir "results"
fi
if [ ! -d "dnsbrute_results/$domain" ]; then
    mkdir "dnsbrute_results/$domain"
fi
#=======================================================================



# Check the requirements
#=======================================================================
if ! command -v subfinder &> /dev/null
then
    echo -e "   ${red}[-]${NC} subfinder could not be found !"
    exit
fi

if ! command -v anew &> /dev/null
then
    echo -e "   ${red}[-]${NC} Anew could not be found !"
    exit
fi

if ! command -v shuffledns &> /dev/null
then
    echo -e "   ${red}[-]${NC} shuffledns could not be found :("
    exit
fi

if ! command -v dnsgen &> /dev/null
then
    echo -e "   ${red}[-]${NC} dnsgen could not be found :("
    exit
fi

if ! command -v massdns &> /dev/null
then
    echo -e "   ${red}[-]${NC} massdns could not be found :("
    exit
fi

if [[ -z "${silent}" ]]; then
	echo -e "   ${green}[+]${NC} All requirements are installed :)"
fi
#=======================================================================


# Check that anysubdomain is resolved to an A record or not
#=======================================================================
if [[ -z "${silent}" ]]; then
	echo
	echo -e "${blue}[!]${NC} Checking ${magenta}vampireishere${NC} as a subdomain for ${cyan}$domain${NC} ..."
fi

if dig +short "vampireishere.${domain}" A | grep -q "^[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+$"; then
    echo -e "   ${red}[-]${NC} The $domain resolved to an IP with this subdomain: ${red}vampireishere${NC} :("
    exit
else
    if [[ -z "${silent}" ]]; then
        echo -e "   ${green}[+]${NC} No A record found :)"
    fi
fi
#=======================================================================

# Subdomain enumeration
#=======================================================================
function subdomain_enum() {
	# Subfinder ==========================
	subfinder -d $domain -all -silent > dnsbrute_results/$domain/subfinder.txt
	
	# CRTSH ==============================
	query=$(cat <<-END
		SELECT
			ci.NAME_VALUE
		FROM
			certificate_and_identities ci
		WHERE
			plainto_tsquery('certwatch', '$domain') @@ identities(ci.CERTIFICATE)
		END
	)
	echo "$query" | psql -t -h crt.sh -p 5432 -U guest certwatch | sed 's/ //g' | grep -E ".*.\.$domain" | sed 's/*\.//g' | tr '[:upper:]' '[:lower:]' | sort -u | tee -a dnsbrute_results/$domain/crtsh.txt &> /dev/null

	# Github subdomains ==================
	q=$(echo $domain | sed -e 's/\./\\\./g')
	src search -json '([a-z\-]+)?:?(\/\/)?([a-zA-Z0-9]+[.])+('${q}') count:5000 fork:yes archived:yes' | jq -r '.Results[] | .lineMatches[].preview, .file.path' | grep -oiE '([a-zA-Z0-9]+[.])+('${q}')' | awk '{ print tolower($0) }' | sort -u > dnsbrute_results/$domain/github.txt

	# Remove duplicates
	cat dnsbrute_results/$domain/subfinder.txt dnsbrute_results/$domain/crtsh.txt dnsbrute_results/$domain/github.txt | sort -u > dnsbrute_results/$domain/subdomains.txt
	rm dnsbrute_results/$domain/subfinder.txt dnsbrute_results/$domain/crtsh.txt dnsbrute_results/$domain/github.txt
}
#=======================================================================



# Name resolution using ShuffleDNS
#=======================================================================
if [ -z "$subdomain" ]; then
	subdomain_enum
	cat dnsbrute_results/$domain/subdomains.txt | sed 's/\.domain\.tld//' > dnsbrute_results/$domain/temp.txt
	cat dnsbrute_results/$domain/temp.txt $wordlist > dnsbrute_results/$domain/wordlist.txt
else
	cat "$subdomain" | sed 's/\.domain\.tld//' > dnsbrute_results/$domain/temp.txt
	cat dnsbrute_results/$domain/temp.txt $wordlist > dnsbrute_results/$domain/wordlist.txt
fi

rm dnsbrute_results/$domain/temp.txt

shuffledns -d $domain -w dnsbrute_results/$domain/wordlist.txt -silent -r $resolvers -o dnsbrute_results/$domain/resolved1.txt
#=======================================================================


# Running dnsGen
#=======================================================================
if [ "$include_unresolved_subs" == true ]; then
	if [ -z "$subdomain" ]; then
		cat dnsbrute_results/$domain/subdomains.txt | anew -q dnsbrute_results/$domain/resolved1.txt
	else
		cat "$subdomain" | anew -q dnsbrute_results/$domain/resolved1.txt
	fi
fi

if [[ -z "${dnsgen_wl}" ]]; then
	cat dnsbrute_results/$domain/resolved1.txt | dnsgen - | shuffledns -d $domain -r resolvers.txt -silent -o dnsbrute_results/$domain/resolved2.txt
else
	cat dnsbrute_results/$domain/resolved1.txt | dnsgen -w $dnsgen_wl - | shuffledns -d $domain -r $resolvers -silent -o dnsbrute_results/$domain/resolved2.txt
fi
#=======================================================================


# Merging resolved lists
#=======================================================================
if [[ -z "${output}" ]]; then
	cat dnsbrute_results/$domain/resolved1.txt dnsbrute_results/$domain/resolved2.txt | sort -u
else
	cat dnsbrute_results/$domain/resolved1.txt dnsbrute_results/$domain/resolved2.txt | sort -u
	cat dnsbrute_results/$domain/resolved1.txt dnsbrute_results/$domain/resolved2.txt | sort -u > dnsbrute_results/$domain/$output
fi
#=======================================================================
